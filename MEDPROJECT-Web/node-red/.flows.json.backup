[
    {
        "id": "f6771373b69cb070",
        "type": "tab",
        "label": "IOT (Distributor 1)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5a4242869b013df1",
        "type": "tab",
        "label": "IOT (Distributor 2)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "a1e6d8509d40be13",
        "type": "tab",
        "label": "IOT (Pharmacy 1)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43bbabafff75ec4c",
        "type": "inject",
        "z": "f6771373b69cb070",
        "name": "Send IoT (5s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 180,
        "wires": [
            [
                "d9fc47a60e4e7036"
            ]
        ]
    },
    {
        "id": "d9fc47a60e4e7036",
        "type": "function",
        "z": "f6771373b69cb070",
        "name": "Generate IoT data",
        "func": "// Génère des valeurs aléatoires\nmsg.payload = {\n  temperature: Math.floor(Math.random() * 31) + 10, // 10-40°C\n  humidity: Math.floor(Math.random() * 51) + 30, // 30-80%\n  timestamp: Date.now(), // Add a timestamp\n  x: (Math.random() * 100).toFixed(2), // Add random X position (e.g., 0.00 to 100.00)\n  y: (Math.random() * 100).toFixed(2)  // Add random Y position (e.g., 0.00 to 100.00)\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 180,
        "wires": [
            [
                "d345862633ea66e1"
            ]
        ]
    },
    {
        "id": "d345862633ea66e1",
        "type": "function",
        "z": "f6771373b69cb070",
        "name": "Store Data for Daily Aggregation",
        "func": "// Store the current data point in flow context for later aggregation\nlet dailyData = flow.get('dailyIoTData') || [];\ndailyData.push(msg.payload);\nflow.set('dailyIoTData', dailyData);\n\nreturn null; // No output from this node immediately",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 180,
        "wires": []
    },
    {
        "id": "25c709fd9da9f4f1",
        "type": "inject",
        "z": "f6771373b69cb070",
        "name": "Trigger each 24 Hours",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 440,
        "wires": [
            [
                "79fb4aa522c08944"
            ]
        ]
    },
    {
        "id": "79fb4aa522c08944",
        "type": "function",
        "z": "f6771373b69cb070",
        "name": "Process Daily Data",
        "func": "// Retrieve all stored daily data\nlet dailyData = flow.get('dailyIoTData') || [];\n\n// If no data, don't process\nif (dailyData.length === 0) {\n    node.warn(\"No data collected in the last 24 hours.\");\n    return null; // Stop the flow\n}\n\n// Separate temperature and humidity values for calculation\nlet tempValues = dailyData.map(data => data.temperature);\nlet humValues = dailyData.map(data => data.humidity);\n\n// Calculate min, max, and average for blockchain\nlet minTemp = Math.min(...tempValues);\nlet maxTemp = Math.max(...tempValues);\nlet avgTemp = tempValues.reduce((a, b) => a + b) / tempValues.length;\n\nlet minHum = Math.min(...humValues);\nlet maxHum = Math.max(...humValues);\nlet avgHum = humValues.reduce((a, b) => a + b) / humValues.length;\n\n// Get the last recorded position (or an average, or the first - taking the last for simplicity)\nlet lastDataPoint = dailyData[dailyData.length - 1];\nlet positionX = lastDataPoint.x || \"\"; // Use empty string if x is not present\nlet positionY = lastDataPoint.y || \"\"; // Use empty string if y is not present\n\n// Create payload for blockchain (aggregated data)\nconst blockchainPayload = {\n    minTemp: Math.round(minTemp), // Round to integer for blockchain\n    maxTemp: Math.round(maxTemp), // Round to integer for blockchain\n    avgTemp: Math.round(avgTemp), // Round to integer for blockchain\n    minHum: Math.round(minHum),   // Round to integer for blockchain\n    maxHum: Math.round(maxHum),   // Round to integer for blockchain\n    avgHum: Math.round(avgHum),   // Round to integer for blockchain\n    aggregationTimestamp: Date.now(),\n    x: positionX, // Add position X\n    y: positionY  // Add position Y\n};\n\n// Create payload for Pinata (all raw data)\nconst pinataPayload = {\n    aggregationTimestamp: Date.now(),\n    dataPoints: dailyData // This will now include x and y for each raw data point\n};\n\n// Clear the daily data after processing\nflow.set('dailyIoTData', []);\n\n// Send messages to both outputs\n// Output 1 for Pinata, Output 2 for Blockchain\nreturn [\n    { payload: pinataPayload },\n    { payload: blockchainPayload }\n];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 540,
        "wires": [
            [
                "74313bf165db59fd"
            ],
            [
                "3923fd41aa0a0b80"
            ]
        ]
    },
    {
        "id": "0f22d077a2da1c2e",
        "type": "function",
        "z": "f6771373b69cb070",
        "name": "Appeler addDailyAggregatedData",
        "func": "// Retrieve the file path from global context\nconst jsonPath = global.get('medecinJsonPath');\nconst fs = global.get('fs');\nconst Web3Class = global.get('Web3');\n\n// Read and parse contract data\nlet contractData;\ntry {\n  contractData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n} catch (err) {\n  node.error(\"Failed to read contract file: \" + err.message, msg);\n  return null;\n}\n\n// Extract required values\nconst abi = contractData.abi;\nconst contractAddress = contractData.networks['5777'].address;\n\n// Initialize Web3 instance\nconst web3 = new Web3Class('http://127.0.0.1:7545'); // Create instance here\n\n// Get accounts using the Web3 INSTANCE\nlet accounts;\ntry {\n  accounts = await web3.eth.getAccounts();\n} catch (err) {\n  node.error(\"Failed to get accounts: \" + err.message, msg);\n  return null;\n}\nconst account = accounts[0];\n\n// Initialize contract\nconst contract = new web3.eth.Contract(abi, contractAddress);\n\n// Validate incoming payload\nconst combinedPayload = msg.payload;\nconst requiredParams = [\n  'minTemp', 'maxTemp', 'avgTemp',\n  'minHum', 'maxHum', 'avgHum',\n  'aggregationTimestamp', 'ipfsHash', 'x', 'y'\n];\n\nif (!combinedPayload || requiredParams.some(param => combinedPayload[param] === undefined)) {\n  node.error(\"Missing required parameters in payload\", msg);\n  return null;\n}\n\n// Prepare contract call\nconst environmentalData = {\n  tempMax: combinedPayload.maxTemp,\n  tempMin: combinedPayload.minTemp,\n  tempAvg: combinedPayload.avgTemp,\n  humidMax: combinedPayload.maxHum,\n  humidMin: combinedPayload.minHum,\n  humidAvg: combinedPayload.avgHum,\n  x: combinedPayload.x,\n  y: combinedPayload.y,\n  timestamp: combinedPayload.aggregationTimestamp\n};\n\nconst iotId = \"dist1\"; // Hardcoded IoT ID\n\n// Execute contract method\ntry {\n  const receipt = await contract.methods.recordEnvironmentalData(\n    iotId,\n    environmentalData\n  ).send({ from: account, gas: 5000000 });\n  \n  msg.payload = {\n    transactionHash: receipt.transactionHash,\n    blockNumber: receipt.blockNumber,\n    status: receipt.status ? \"Success\" : \"Failed\"\n  };\n  return msg;\n} catch (err) {\n  node.error(\"Contract error: \" + err.message, msg);\n  msg.error = err;\n  return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "bc17e3769ab270f3"
            ]
        ]
    },
    {
        "id": "bc17e3769ab270f3",
        "type": "debug",
        "z": "f6771373b69cb070",
        "name": "Daily Aggregated Blockchain Résultat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 320,
        "wires": []
    },
    {
        "id": "74313bf165db59fd",
        "type": "function",
        "z": "f6771373b69cb070",
        "name": "Pin Daily Aggregated JSON to IPFS",
        "func": "const apiKey = global.get(\"PINATA_API_KEY\");\nconst secretKey = global.get(\"PINATA_SECRET_KEY\");\n\nif (!apiKey || !secretKey) {\n    // If you see this, check that you restarted Node-RED and updated settings.js correctly.\n    node.error(\"Missing PINATA_API_KEY or PINATA_SECRET_KEY in functionGlobalContext.\");\n    return null;\n}\n\nconst pinata = new pinataSDK(apiKey, secretKey);\n\nconst aggregatedJson = msg.payload;\n\nconst options = {\n    pinataMetadata: {\n        name: `daily_raw_iot_data_${aggregatedJson.aggregationTimestamp}`,\n        keyvalues: {\n            aggregationTimestamp: aggregatedJson.aggregationTimestamp,\n            dataPointsCount: aggregatedJson.dataPoints.length\n        }\n    },\n    pinataOptions: {\n        cidVersion: 0\n    }\n};\n\n// Pin the aggregated JSON data to IPFS\npinata.pinJSONToIPFS(aggregatedJson, options).then((result) => {\n    msg.payload = result; // The result includes the IpfsHash and other details\n    node.send([ msg, null ]); // Send success to the first output\n}).catch((err) => {\n    msg.payload = err; // Send the error to the payload\n    node.error(\"Error pinning daily raw data to Pinata:\", err);\n    node.send([ null, msg ]); // Send error to the second output\n});\n\n// No need to return msg here as we are handling outputs within the .then() and .catch()",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "pinataSDK",
                "module": "@pinata/sdk"
            }
        ],
        "x": 840,
        "y": 480,
        "wires": [
            [
                "2639645718373c8e",
                "5ccb0d604eda42ba",
                "7ecc123fb6d51f07"
            ],
            []
        ]
    },
    {
        "id": "2639645718373c8e",
        "type": "debug",
        "z": "f6771373b69cb070",
        "name": "Daily Pinata Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 520,
        "wires": []
    },
    {
        "id": "5ccb0d604eda42ba",
        "type": "debug",
        "z": "f6771373b69cb070",
        "name": "Daily Pinata IPFS Hash",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.IpfsHash",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 440,
        "wires": []
    },
    {
        "id": "3923fd41aa0a0b80",
        "type": "function",
        "z": "f6771373b69cb070",
        "name": "Store Blockchain Data",
        "func": "// Store the blockchain payload in flow context\nflow.set('blockchainPayload', msg.payload);\n\n// Do not send anything from this node yet\nreturn null;\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 805.0000152587891,
        "y": 596.0000085830688,
        "wires": []
    },
    {
        "id": "7ecc123fb6d51f07",
        "type": "function",
        "z": "f6771373b69cb070",
        "name": "Combine Data and IPFS Hash",
        "func": "// Retrieve the stored blockchain payload\nlet blockchainPayload = flow.get('blockchainPayload');\n\n// Check if the blockchain payload exists\nif (!blockchainPayload) {\n    node.error(\"Blockchain payload not found in flow context.\", msg);\n    return null; // Stop the flow if blockchain data is missing\n}\n\n// The incoming message payload from the previous node (Pinata) contains the IPFS hash\nconst ipfsHash = msg.payload.IpfsHash;\n\n// Check if the IPFS hash is present\nif (!ipfsHash) {\n     node.error(\"IPFS hash not found in the incoming message payload.\", msg);\n     return null; // Stop the flow if IPFS hash is missing\n}\n\n// Combine the blockchain data with the IPFS hash and position data\nconst combinedPayload = {\n    minTemp: blockchainPayload.minTemp,\n    maxTemp: blockchainPayload.maxTemp,\n    avgTemp: blockchainPayload.avgTemp,\n    minHum: blockchainPayload.minHum,\n    maxHum: blockchainPayload.maxHum,\n    avgHum: blockchainPayload.avgHum,\n    aggregationTimestamp: blockchainPayload.aggregationTimestamp,\n    ipfsHash: ipfsHash, // Add the IPFS hash here\n    x: blockchainPayload.x, // Add position X\n    y: blockchainPayload.y  // Add position Y\n};\n\n// Set the combined payload as the message payload for the next node\nmsg.payload = combinedPayload;\n\n// Clear the stored blockchain data from flow context (optional but good practice)\nflow.set('blockchainPayload', null);\n\n// Send the combined message to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 400,
        "wires": [
            [
                "0f22d077a2da1c2e"
            ]
        ]
    },
    {
        "id": "ec57f9df4e2716d3",
        "type": "inject",
        "z": "5a4242869b013df1",
        "name": "Send IoT (5s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 200,
        "wires": [
            [
                "6d77f4d05e9769c8"
            ]
        ]
    },
    {
        "id": "6d77f4d05e9769c8",
        "type": "function",
        "z": "5a4242869b013df1",
        "name": "Generate IoT data",
        "func": "// Génère des valeurs aléatoires\nmsg.payload = {\n  temperature: Math.floor(Math.random() * 31) + 10, // 10-40°C\n  humidity: Math.floor(Math.random() * 51) + 30, // 30-80%\n  timestamp: Date.now(), // Add a timestamp\n  x: (Math.random() * 100).toFixed(2), // Add random X position (e.g., 0.00 to 100.00)\n  y: (Math.random() * 100).toFixed(2)  // Add random Y position (e.g., 0.00 to 100.00)\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "a7b105dff4d74572"
            ]
        ]
    },
    {
        "id": "a7b105dff4d74572",
        "type": "function",
        "z": "5a4242869b013df1",
        "name": "Store Data for Daily Aggregation",
        "func": "// Store the current data point in flow context for later aggregation\nlet dailyData = flow.get('dailyIoTData') || [];\ndailyData.push(msg.payload);\nflow.set('dailyIoTData', dailyData);\n\nreturn null; // No output from this node immediately",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 200,
        "wires": []
    },
    {
        "id": "140fb98bf1a94262",
        "type": "inject",
        "z": "5a4242869b013df1",
        "name": "Trigger each 24 Hours",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 460,
        "wires": [
            [
                "e572dd700ee776d5"
            ]
        ]
    },
    {
        "id": "e572dd700ee776d5",
        "type": "function",
        "z": "5a4242869b013df1",
        "name": "Process Daily Data",
        "func": "// Retrieve all stored daily data\nlet dailyData = flow.get('dailyIoTData') || [];\n\n// If no data, don't process\nif (dailyData.length === 0) {\n    node.warn(\"No data collected in the last 24 hours.\");\n    return null; // Stop the flow\n}\n\n// Separate temperature and humidity values for calculation\nlet tempValues = dailyData.map(data => data.temperature);\nlet humValues = dailyData.map(data => data.humidity);\n\n// Calculate min, max, and average for blockchain\nlet minTemp = Math.min(...tempValues);\nlet maxTemp = Math.max(...tempValues);\nlet avgTemp = tempValues.reduce((a, b) => a + b) / tempValues.length;\n\nlet minHum = Math.min(...humValues);\nlet maxHum = Math.max(...humValues);\nlet avgHum = humValues.reduce((a, b) => a + b) / humValues.length;\n\n// Get the last recorded position (or an average, or the first - taking the last for simplicity)\nlet lastDataPoint = dailyData[dailyData.length - 1];\nlet positionX = lastDataPoint.x || \"\"; // Use empty string if x is not present\nlet positionY = lastDataPoint.y || \"\"; // Use empty string if y is not present\n\n// Create payload for blockchain (aggregated data)\nconst blockchainPayload = {\n    minTemp: Math.round(minTemp), // Round to integer for blockchain\n    maxTemp: Math.round(maxTemp), // Round to integer for blockchain\n    avgTemp: Math.round(avgTemp), // Round to integer for blockchain\n    minHum: Math.round(minHum),   // Round to integer for blockchain\n    maxHum: Math.round(maxHum),   // Round to integer for blockchain\n    avgHum: Math.round(avgHum),   // Round to integer for blockchain\n    aggregationTimestamp: Date.now(),\n    x: positionX, // Add position X\n    y: positionY  // Add position Y\n};\n\n// Create payload for Pinata (all raw data)\nconst pinataPayload = {\n    aggregationTimestamp: Date.now(),\n    dataPoints: dailyData // This will now include x and y for each raw data point\n};\n\n// Clear the daily data after processing\nflow.set('dailyIoTData', []);\n\n// Send messages to both outputs\n// Output 1 for Pinata, Output 2 for Blockchain\nreturn [\n    { payload: pinataPayload },\n    { payload: blockchainPayload }\n];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "9e4c39b5bb1c0d6f"
            ],
            [
                "c9396ff207795c79"
            ]
        ]
    },
    {
        "id": "db18886a550285c2",
        "type": "function",
        "z": "5a4242869b013df1",
        "name": "Appeler addDailyAggregatedData",
        "func": "// Retrieve the file path from global context\nconst jsonPath = global.get('medecinJsonPath');\nconst fs = global.get('fs');\nconst Web3Class = global.get('Web3');\n\n// Read and parse contract data\nlet contractData;\ntry {\n  contractData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n} catch (err) {\n  node.error(\"Failed to read contract file: \" + err.message, msg);\n  return null;\n}\n\n// Extract required values\nconst abi = contractData.abi;\nconst contractAddress = contractData.networks['5777'].address;\n\n// Initialize Web3 instance\nconst web3 = new Web3Class('http://127.0.0.1:7545'); // Create instance here\n\n// Get accounts using the Web3 INSTANCE\nlet accounts;\ntry {\n  accounts = await web3.eth.getAccounts();\n} catch (err) {\n  node.error(\"Failed to get accounts: \" + err.message, msg);\n  return null;\n}\nconst account = accounts[0];\n\n// Initialize contract\nconst contract = new web3.eth.Contract(abi, contractAddress);\n\n// Validate incoming payload\nconst combinedPayload = msg.payload;\nconst requiredParams = [\n  'minTemp', 'maxTemp', 'avgTemp',\n  'minHum', 'maxHum', 'avgHum',\n  'aggregationTimestamp', 'ipfsHash', 'x', 'y'\n];\n\nif (!combinedPayload || requiredParams.some(param => combinedPayload[param] === undefined)) {\n  node.error(\"Missing required parameters in payload\", msg);\n  return null;\n}\n\n// Prepare contract call\nconst environmentalData = {\n  tempMax: combinedPayload.maxTemp,\n  tempMin: combinedPayload.minTemp,\n  tempAvg: combinedPayload.avgTemp,\n  humidMax: combinedPayload.maxHum,\n  humidMin: combinedPayload.minHum,\n  humidAvg: combinedPayload.avgHum,\n  x: combinedPayload.x,\n  y: combinedPayload.y,\n  timestamp: combinedPayload.aggregationTimestamp\n};\n\nconst iotId = \"dist2\"; // Hardcoded IoT ID\n\n// Execute contract method\ntry {\n  const receipt = await contract.methods.recordEnvironmentalData(\n    iotId,\n    environmentalData\n  ).send({ from: account, gas: 5000000 });\n  \n  msg.payload = {\n    transactionHash: receipt.transactionHash,\n    blockNumber: receipt.blockNumber,\n    status: receipt.status ? \"Success\" : \"Failed\"\n  };\n  return msg;\n} catch (err) {\n  node.error(\"Contract error: \" + err.message, msg);\n  msg.error = err;\n  return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 340,
        "wires": [
            [
                "ee40cd69ac4b348f"
            ]
        ]
    },
    {
        "id": "ee40cd69ac4b348f",
        "type": "debug",
        "z": "5a4242869b013df1",
        "name": "Daily Aggregated Blockchain Résultat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 340,
        "wires": []
    },
    {
        "id": "9e4c39b5bb1c0d6f",
        "type": "function",
        "z": "5a4242869b013df1",
        "name": "Pin Daily Aggregated JSON to IPFS",
        "func": "const apiKey = global.get(\"PINATA_API_KEY\");\nconst secretKey = global.get(\"PINATA_SECRET_KEY\");\n\nif (!apiKey || !secretKey) {\n    // If you see this, check that you restarted Node-RED and updated settings.js correctly.\n    node.error(\"Missing PINATA_API_KEY or PINATA_SECRET_KEY in functionGlobalContext.\");\n    return null;\n}\n\nconst pinata = new pinataSDK(apiKey, secretKey);\nconst aggregatedJson = msg.payload;\n\nconst options = {\n    pinataMetadata: {\n        name: `daily_raw_iot_data_${aggregatedJson.aggregationTimestamp}`,\n        keyvalues: {\n            aggregationTimestamp: aggregatedJson.aggregationTimestamp,\n            dataPointsCount: aggregatedJson.dataPoints.length\n        }\n    },\n    pinataOptions: {\n        cidVersion: 0\n    }\n};\n\n// Pin the aggregated JSON data to IPFS\npinata.pinJSONToIPFS(aggregatedJson, options).then((result) => {\n    msg.payload = result; // The result includes the IpfsHash and other details\n    node.send([ msg, null ]); // Send success to the first output\n}).catch((err) => {\n    msg.payload = err; // Send the error to the payload\n    node.error(\"Error pinning daily raw data to Pinata:\", err);\n    node.send([ null, msg ]); // Send error to the second output\n});\n\n// No need to return msg here as we are handling outputs within the .then() and .catch()",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "pinataSDK",
                "module": "@pinata/sdk"
            }
        ],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "099bb4f3d836e3b9",
                "82e1356672a7cd81",
                "4e7fc50f010a8605"
            ],
            []
        ]
    },
    {
        "id": "099bb4f3d836e3b9",
        "type": "debug",
        "z": "5a4242869b013df1",
        "name": "Daily Pinata Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 540,
        "wires": []
    },
    {
        "id": "82e1356672a7cd81",
        "type": "debug",
        "z": "5a4242869b013df1",
        "name": "Daily Pinata IPFS Hash",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.IpfsHash",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 460,
        "wires": []
    },
    {
        "id": "c9396ff207795c79",
        "type": "function",
        "z": "5a4242869b013df1",
        "name": "Store Blockchain Data",
        "func": "// Store the blockchain payload in flow context\nflow.set('blockchainPayload', msg.payload);\n\n// Do not send anything from this node yet\nreturn null;\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 620,
        "wires": []
    },
    {
        "id": "4e7fc50f010a8605",
        "type": "function",
        "z": "5a4242869b013df1",
        "name": "Combine Data and IPFS Hash",
        "func": "// Retrieve the stored blockchain payload\nlet blockchainPayload = flow.get('blockchainPayload');\n\n// Check if the blockchain payload exists\nif (!blockchainPayload) {\n    node.error(\"Blockchain payload not found in flow context.\", msg);\n    return null; // Stop the flow if blockchain data is missing\n}\n\n// The incoming message payload from the previous node (Pinata) contains the IPFS hash\nconst ipfsHash = msg.payload.IpfsHash;\n\n// Check if the IPFS hash is present\nif (!ipfsHash) {\n     node.error(\"IPFS hash not found in the incoming message payload.\", msg);\n     return null; // Stop the flow if IPFS hash is missing\n}\n\n// Combine the blockchain data with the IPFS hash and position data\nconst combinedPayload = {\n    minTemp: blockchainPayload.minTemp,\n    maxTemp: blockchainPayload.maxTemp,\n    avgTemp: blockchainPayload.avgTemp,\n    minHum: blockchainPayload.minHum,\n    maxHum: blockchainPayload.maxHum,\n    avgHum: blockchainPayload.avgHum,\n    aggregationTimestamp: blockchainPayload.aggregationTimestamp,\n    ipfsHash: ipfsHash, // Add the IPFS hash here\n    x: blockchainPayload.x, // Add position X\n    y: blockchainPayload.y  // Add position Y\n};\n\n// Set the combined payload as the message payload for the next node\nmsg.payload = combinedPayload;\n\n// Clear the stored blockchain data from flow context (optional but good practice)\nflow.set('blockchainPayload', null);\n\n// Send the combined message to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 420,
        "wires": [
            [
                "db18886a550285c2"
            ]
        ]
    },
    {
        "id": "e81fa2afcb306a06",
        "type": "inject",
        "z": "a1e6d8509d40be13",
        "name": "Send IoT (5s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 240,
        "wires": [
            [
                "8c4be6744ad9b75e"
            ]
        ]
    },
    {
        "id": "8c4be6744ad9b75e",
        "type": "function",
        "z": "a1e6d8509d40be13",
        "name": "Generate IoT data",
        "func": "// Génère des valeurs aléatoires pour temperature et humidity,\n// et utilise des coordonnées fixes pour Guelmim, Maroc\nmsg.payload = {\n  temperature: Math.floor(Math.random() * 31) + 10, // 10-40°C\n  humidity: Math.floor(Math.random() * 51) + 30, // 30-80%\n  timestamp: Date.now(), // Add a timestamp\n  x: -10.07, // Fixed Longitude for Guelmim, Morocco\n  y: 28.99   // Fixed Latitude for Guelmim, Morocco\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 240,
        "wires": [
            [
                "30376861192ca730"
            ]
        ]
    },
    {
        "id": "30376861192ca730",
        "type": "function",
        "z": "a1e6d8509d40be13",
        "name": "Store Data for Daily Aggregation",
        "func": "// Store the current data point in flow context for later aggregation\nlet dailyData = flow.get('dailyIoTData') || [];\ndailyData.push(msg.payload);\nflow.set('dailyIoTData', dailyData);\n\nreturn null; // No output from this node immediately",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 240,
        "wires": []
    },
    {
        "id": "8adad827a3d1a787",
        "type": "inject",
        "z": "a1e6d8509d40be13",
        "name": "Trigger each 24 Hours",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 500,
        "wires": [
            [
                "888af312570821dd"
            ]
        ]
    },
    {
        "id": "888af312570821dd",
        "type": "function",
        "z": "a1e6d8509d40be13",
        "name": "Process Daily Data",
        "func": "// Retrieve all stored daily data\nlet dailyData = flow.get('dailyIoTData') || [];\n\n// If no data, don't process\nif (dailyData.length === 0) {\n    node.warn(\"No data collected in the last 24 hours.\");\n    return null; // Stop the flow\n}\n\n// Separate temperature and humidity values for calculation\nlet tempValues = dailyData.map(data => data.temperature);\nlet humValues = dailyData.map(data => data.humidity);\n\n// Calculate min, max, and average for blockchain\nlet minTemp = Math.min(...tempValues);\nlet maxTemp = Math.max(...tempValues);\nlet avgTemp = tempValues.reduce((a, b) => a + b) / tempValues.length;\n\nlet minHum = Math.min(...humValues);\nlet maxHum = Math.max(...humValues);\nlet avgHum = humValues.reduce((a, b) => a + b) / humValues.length;\n\n// **MODIFICATION START**\n// Use the fixed coordinates for Guelmim directly\nlet fixedLongitude = -10.07; // Fixed Longitude for Guelmim, Morocco\nlet fixedLatitude = 28.99;   // Fixed Latitude for Guelmim, Morocco\n// **MODIFICATION END**\n\n// Create payload for blockchain (aggregated data)\nconst blockchainPayload = {\n    minTemp: Math.round(minTemp), // Round to integer for blockchain\n    maxTemp: Math.round(maxTemp), // Round to integer for blockchain\n    avgTemp: Math.round(avgTemp), // Round to integer for blockchain\n    minHum: Math.round(minHum),   // Round to integer for blockchain\n    maxHum: Math.round(maxHum),   // Round to integer for blockchain\n    avgHum: Math.round(avgHum),   // Round to integer for blockchain\n    aggregationTimestamp: Date.now(),\n    // **MODIFICATION START**\n    x: fixedLongitude.toString(), // Add fixed position X (convert to string as per your ABI)\n    y: fixedLatitude.toString()   // Add fixed position Y (convert to string as per your ABI)\n    // **MODIFICATION END**\n};\n\n// Create payload for Pinata (all raw data)\nconst pinataPayload = {\n    aggregationTimestamp: Date.now(),\n    dataPoints: dailyData // This will now include the fixed x and y for each raw data point\n};\n\n// Clear the daily data after processing\nflow.set('dailyIoTData', []);\n\n// Send messages to both outputs\n// Output 1 for Pinata, Output 2 for Blockchain\nreturn [\n    { payload: pinataPayload },\n    { payload: blockchainPayload }\n];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            [
                "944426641b9611ea"
            ],
            [
                "fdd6a6548590dd59"
            ]
        ]
    },
    {
        "id": "edc3e0ce5be2442d",
        "type": "function",
        "z": "a1e6d8509d40be13",
        "name": "Appeler addDailyAggregatedData",
        "func": "// Retrieve the file path from global context\nconst jsonPath = global.get('medecinJsonPath');\nconst fs = global.get('fs');\nconst Web3Class = global.get('Web3');\n\n// Read and parse contract data\nlet contractData;\ntry {\n  contractData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));\n} catch (err) {\n  node.error(\"Failed to read contract file: \" + err.message, msg);\n  return null;\n}\n\n// Extract required values\nconst abi = contractData.abi;\nconst contractAddress = contractData.networks['5777'].address;\n\n// Initialize Web3 instance\nconst web3 = new Web3Class('http://127.0.0.1:7545'); // Create instance here\n\n// Get accounts using the Web3 INSTANCE\nlet accounts;\ntry {\n  accounts = await web3.eth.getAccounts();\n} catch (err) {\n  node.error(\"Failed to get accounts: \" + err.message, msg);\n  return null;\n}\nconst account = accounts[0];\n\n// Initialize contract\nconst contract = new web3.eth.Contract(abi, contractAddress); // votre compte\n\n// The incoming message payload contains the combined data from previous nodes\nconst combinedPayload = msg.payload;\n\n// Check if all required parameters are present\nif (combinedPayload === undefined ||\n  combinedPayload.minTemp === undefined ||\n  combinedPayload.maxTemp === undefined ||\n  combinedPayload.avgTemp === undefined ||\n  combinedPayload.minHum === undefined ||\n  combinedPayload.maxHum === undefined ||\n  combinedPayload.avgHum === undefined ||\n  combinedPayload.aggregationTimestamp === undefined ||\n  combinedPayload.ipfsHash === undefined ||\n  combinedPayload.x === undefined || // Check for x\n  combinedPayload.y === undefined // Check for y\n  ) {\n  node.error(\"Missing required parameters in the incoming message payload.\", msg);\n  return null; // Stop the flow if parameters are missing\n}\n\n// Prepare the EnvironmentalData struct for the contract call\nconst environmentalData = {\n    tempMax: combinedPayload.maxTemp,\n    tempMin: combinedPayload.minTemp,\n    tempAvg: combinedPayload.avgTemp,\n    humidMax: combinedPayload.maxHum,\n    humidMin: combinedPayload.minHum,\n    humidAvg: combinedPayload.avgHum,\n    x: combinedPayload.x,\n    y: combinedPayload.y,\n    timestamp: combinedPayload.aggregationTimestamp\n};\n\n// You need to provide an IoT ID. This should match an IoT ID assigned to a box\n// in your contract using the assignBoxToIoT function.\n// For testing, you can use a hardcoded value that corresponds to a box.\nconst iotId = \"pharma1\"; // Replace with the actual IoT ID assigned to a box\n\n// Call the recordEnvironmentalData function with the IoT ID and the EnvironmentalData struct\nreturn contract.methods.recordEnvironmentalData(\n  iotId,\n  environmentalData\n).send({ from: account, gas: 5000000 }) // Adjust gas as needed\n  .then(receipt => {\n    msg.payload = receipt;\n    return msg;\n  })\n  .catch(err => {\n    node.error(err, msg);\n  });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "c786dcb8e83c602d"
            ]
        ]
    },
    {
        "id": "c786dcb8e83c602d",
        "type": "debug",
        "z": "a1e6d8509d40be13",
        "name": "Daily Aggregated Blockchain Résultat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 380,
        "wires": []
    },
    {
        "id": "944426641b9611ea",
        "type": "function",
        "z": "a1e6d8509d40be13",
        "name": "Pin Daily Aggregated JSON to IPFS",
        "func": "const apiKey = global.get(\"PINATA_API_KEY\");\nconst secretKey = global.get(\"PINATA_SECRET_KEY\");\n\nif (!apiKey || !secretKey) {\n    // If you see this, check that you restarted Node-RED and updated settings.js correctly.\n    node.error(\"Missing PINATA_API_KEY or PINATA_SECRET_KEY in functionGlobalContext.\");\n    return null;\n}\n\nconst pinata = new pinataSDK(apiKey, secretKey);\n\nconst aggregatedJson = msg.payload;\n\nconst options = {\n    pinataMetadata: {\n        name: `daily_raw_iot_data_${aggregatedJson.aggregationTimestamp}`,\n        keyvalues: {\n            aggregationTimestamp: aggregatedJson.aggregationTimestamp,\n            dataPointsCount: aggregatedJson.dataPoints.length\n        }\n    },\n    pinataOptions: {\n        cidVersion: 0\n    }\n};\n\n// Pin the aggregated JSON data to IPFS\npinata.pinJSONToIPFS(aggregatedJson, options).then((result) => {\n    msg.payload = result; // The result includes the IpfsHash and other details\n    node.send([ msg, null ]); // Send success to the first output\n}).catch((err) => {\n    msg.payload = err; // Send the error to the payload\n    node.error(\"Error pinning daily raw data to Pinata:\", err);\n    node.send([ null, msg ]); // Send error to the second output\n});\n\n// No need to return msg here as we are handling outputs within the .then() and .catch()",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "pinataSDK",
                "module": "@pinata/sdk"
            }
        ],
        "x": 920,
        "y": 540,
        "wires": [
            [
                "eb7b597a8d425f26",
                "74755818b4ee833b",
                "bd1aa32bc2db70d4"
            ],
            []
        ]
    },
    {
        "id": "eb7b597a8d425f26",
        "type": "debug",
        "z": "a1e6d8509d40be13",
        "name": "Daily Pinata Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 580,
        "wires": []
    },
    {
        "id": "74755818b4ee833b",
        "type": "debug",
        "z": "a1e6d8509d40be13",
        "name": "Daily Pinata IPFS Hash",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.IpfsHash",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 500,
        "wires": []
    },
    {
        "id": "fdd6a6548590dd59",
        "type": "function",
        "z": "a1e6d8509d40be13",
        "name": "Store Blockchain Data",
        "func": "// Store the blockchain payload in flow context\nflow.set('blockchainPayload', msg.payload);\n\n// Do not send anything from this node yet\nreturn null;\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 660,
        "wires": []
    },
    {
        "id": "bd1aa32bc2db70d4",
        "type": "function",
        "z": "a1e6d8509d40be13",
        "name": "Combine Data and IPFS Hash",
        "func": "// Retrieve the stored blockchain payload\nlet blockchainPayload = flow.get('blockchainPayload');\n\n// Check if the blockchain payload exists\nif (!blockchainPayload) {\n    node.error(\"Blockchain payload not found in flow context.\", msg);\n    return null; // Stop the flow if blockchain data is missing\n}\n\n// The incoming message payload from the previous node (Pinata) contains the IPFS hash\nconst ipfsHash = msg.payload.IpfsHash;\n\n// Check if the IPFS hash is present\nif (!ipfsHash) {\n     node.error(\"IPFS hash not found in the incoming message payload.\", msg);\n     return null; // Stop the flow if IPFS hash is missing\n}\n\n// Combine the blockchain data with the IPFS hash and position data\nconst combinedPayload = {\n    minTemp: blockchainPayload.minTemp,\n    maxTemp: blockchainPayload.maxTemp,\n    avgTemp: blockchainPayload.avgTemp,\n    minHum: blockchainPayload.minHum,\n    maxHum: blockchainPayload.maxHum,\n    avgHum: blockchainPayload.avgHum,\n    aggregationTimestamp: blockchainPayload.aggregationTimestamp,\n    ipfsHash: ipfsHash, // Add the IPFS hash here\n    x: blockchainPayload.x, // Add position X\n    y: blockchainPayload.y  // Add position Y\n};\n\n// Set the combined payload as the message payload for the next node\nmsg.payload = combinedPayload;\n\n// Clear the stored blockchain data from flow context (optional but good practice)\nflow.set('blockchainPayload', null);\n\n// Send the combined message to the next node\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 460,
        "wires": [
            [
                "edc3e0ce5be2442d"
            ]
        ]
    }
]